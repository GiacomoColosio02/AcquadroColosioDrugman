// ----------------------------------  SIGNATURES  ----------------------------------


// USERS (for people: Student, CompanyTutor and Professor)
abstract sig User {  // abstract signature
    communicate: set User  // users can communicate with other users
}


// STUDENT
sig Student extends User {  // a student is an user
    belongsTo: one University,  // must be enrolled in exactly one university
    haveStudentInformation: one StudentInformation_CV,  // must have exactly one studentInformation (that contains also the cv)
    universityMail: one Email,  // must have exactly one university mail
    visualize: set Internship,  // can visualize the internships
    applies: set Internship,  // can apply to internships
    seeCompanyProblem: set ProblemOfCompany // can see the companyProblem
}


// COMPANYTUTOR
sig CompanyTutor extends User {  // a companyTutor is a user
    workFor: one Company,  // must work for exactly one company
    manages: some Internship,   // manage some internships
    read: set StudentInformation_CV,  // can read students' StudentInformation_CV
    evaluations: set InternshipStatus,  // can evaluate students
    see: set ProblemOfStudent,  // can see reported problems of students
    seeCompanyProblem: set ProblemOfCompany, // can see reported problems of companies
    manageProblemOfCompany: set ProblemOfCompany // can also manage problems of companies
}


// PROFESSOR
sig Professor extends User {
    worksFor: one University,  // must work for exactly one university
    see: set ProblemOfStudent, //  each professor has a set of problemsOfStudents they can see
    seeCompanyProblem: set ProblemOfCompany,  // each professor has a set of problemsOfSComapny they can see
    manageProblemOfStudent: set ProblemOfStudent // professors manage problems
}


// COMPANIES
sig Company {
    representBy: some CompanyTutor,  // is represented by some companyTutor
    offerInternships: set Internship,  // can offers internships on the platform
    haveCompanyInformation: one CompanyInformation  // each company has one and only one CompanyInformation
}


// INTERNSHIPS
sig Internship {
    offeredBy: one CompanyTutor,  // each internship is offered by exactly one companyTutor
    offeredFor: one Company, // each internship is offered for exactly one company
    haveInternshipInformation: one InternshipInformation, // each internship has one information
     terminated: lone Positive  // each internship will eventually terminate
}


// UNIVERSITIES
sig University {
    hasStudents: set Student, // zero or more students belong to the university
    haveUniversityInformation: one UniversityInformation, // each university has one information
    associatedToUni: set Professor,  // each university employs professors
    monitor: set Student  // university monitor students
}


// INTERNSHIPSTATUS
sig InternshipStatus {
    companyTutor: one CompanyTutor,  // an internshipStatus has one companyTutor (who accepts or not the internship)
    internship: one Internship,  // the internshipStatus focuses on one specific internship
    student: one Student,  // each internshipStatus focuses on one specific student
    result: one EvalResult, // each internshipStatus must have a result 
    universityTutor: lone Professor // zero or one professor is assigned for the internship
}


// FEEDBACK INTERNSHIP
sig FeedbackToInternship {
    feedbackInternshipFor: one Company,   // feedback for exactly one company
    feedbackInternshipOn: one Internship,        // feedback on exactly one internship
    feedbackInternshipAbout: one InternshipInformation  // feedback about exactly one internship information
}


// FEEDBACK STUDENT
sig FeedbackToStudent {
    feedbackStudentAbout: one StudentInformation_CV,  // one studentInformation_CV being reviewed
    feedbackStudentFor: one Student  // one student receiving the feedback
}


// PROBLEM OF STUDENT
sig ProblemOfStudent {
    reportedBy: one Student,           // each problemOfStudent is reported by exactly one student
    aboutInternship: one Internship,   // each problem is about exactly one internship
    terminateInternship: one (Positive + Negative) // terminateInternship points to either Positive or Negative
}


// PROBLEM OF COMPANY
sig ProblemOfCompany {
    reportedBy: one CompanyTutor,    // reported by exactly one CompanyTutor
    aboutInternship: one Internship,       // about exactly one internship
    terminateInternship: one (Positive + Negative) // the problem leads to a positive or negative termination
}


// ALGORITHM 
one sig Algorithm { // is the one suggesting all the feedbacks to students and internships
    suggestoToStudent: set FeedbackToStudent,
    suggestoToInternship: set FeedbackToInternship
}


// MISCELLANEOUS
sig Email {associatedTo: lone University}  // an email is related to at most one university (use lone since technically we could have a email not associated to the university (such as a personalMail)
sig InternshipInformation {}
sig CompanyInformation {}
sig UniversityInformation {
    describesUni: one University
}
sig StudentInformation_CV {
    owner: one Student // each haveStudentInformation belongs to one student only
}
abstract sig EvalResult {}
one sig Positive extends EvalResult {}  // the result of an evaluation can be positive…
one sig Negative extends EvalResult {}  // … or negative








// ----------------------------------  FACTS  ----------------------------------








// each CompanyTutor works for exactly one company 
// and each CompanyTutor manages internships offered by their company
fact OneCompanyTutorToOneCompany { 
    all c: Company | all r: c.representBy | r.workFor = c  // for every company, every tutor that represent that company also works for the same company
    all cr: CompanyTutor | one cr.workFor  // each companyTutor worksFor exactly one company
    all cr: CompanyTutor | cr.manages in cr.workFor.offerInternships  //  every internship a companyTutor manages is one offered by the company were the companyTutor works
}


// each internship is offered by the correct company
fact companyToInternship {  // bidirectionality (part1): if a company offers an internships, the internships is offered for the same company
    all c: Company | all i: c.offerInternships | i.offeredFor = c
}


// guarantees that each internship offered for a company is the same company for which the companyTutor works
fact InternshipOfferedByCorrectCompanyTutor {  // bidirectionality (part2)
    all i: Internship | i.offeredFor = i.offeredBy.workFor  // 
}


// each internship is managed by the correct companyTutor
fact companyRepToInternship {  // every internship that a company tutor manage must be offered by the same companyTutor
    all cr: CompanyTutor | all i: cr.manages | i.offeredBy = cr
}


// each email is assigned to at most one student and must be the student's university mail
fact EmailsAssignedToOnlyOneStudent {
    all e: Email | lone s: Student | e = s.universityMail  // at most one student with that email
}


// no student can have the same university mail
fact UniqueUniversityMails {
    all disj s1, s2: Student | s1.universityMail != s2.universityMail  // distinct students have distinct university mails
}


// every mail is a student's university mail 
// and university mail are managed by the university to which the student belongs
fact EmailManager {
    all e: Email | some s: Student | e = s.universityMail
    all s: Student | s.universityMail.associatedTo = s.belongsTo
}


// each internship has unique information
fact UniqueInternshipInformation {
    all disj i1, i2: Internship | i1.haveInternshipInformation != i2.haveInternshipInformation 
}


// there can not exist an InternshipInformation not linked to an internship 
fact AllInformationsLinked {
    all d: InternshipInformation | some i: Internship | i.haveInternshipInformation = d
}


// a student has exactly one StudentInformation_CV, and it belongs only to that student
fact StudentOwnsTheirStudentInformation_CV {
    all s: Student | s.haveStudentInformation.owner = s
    all disj c1, c2: StudentInformation_CV | c1.owner = c2.owner implies c1 = c2
}


// a student first needs to visualize an internship before applying
fact ApplicationRequiresVisualization {
    all s: Student, i: Internship |
        i in s.applies implies i in s.visualize  // applies implies visualized (but a student could visualize and not apply for an internship)
}


// each university has a unique universityInformation and a UniveristyInformation describes exactly one university (1-to-1)
fact OneToOneUniversityAndUniversityInformation {
    all disj u1, u2: University | u1.haveUniversityInformation != u2.haveUniversityInformation
    all d: UniversityInformation | d.describesUni.haveUniversityInformation = d
}


// a professor works for exactly one university and is associated to it
fact ProfessorWorksForUniversity {
    all p: Professor | p.worksFor in University
    all p: Professor | p in p.worksFor.associatedToUni
}


// each professor is employed by exactly one university
fact EachProfessorEmployedByOnlyOneUniversity {
    all p: Professor | one u: University | p in u.associatedToUni
}


// eventually, every internship application will be evaluated by the companyTutor
fact EventuallyEvaluated {
    all s: Student, i: Internship | 
        i in s.applies implies 
        eventually (
            some eval: InternshipStatus | 
                eval.internship = i and
                eval.companyTutor in i.offeredBy and
                eval.student = s
        )
}


// an evaluation for an internship application can be done only by the companyTutor that manages that internship
fact ValidInternshipStatus {
    all eval: InternshipStatus |
        eval.internship in eval.companyTutor.manages and
        eval.internship in eval.student.applies
}


// to evaluate an internship, the companyTutor needs to read the student's StudentInformation_CV first
fact IfEvaluatedThenReadStudentInformation_CV { 
    all eval: InternshipStatus |
        eval.student.haveStudentInformation in eval.companyTutor.read
}


// every university has at least one professor
fact EveryUniversityHasAtLeastOneProfessor {  // needed so that if a student is accepted for an internship there can be a universityTutor
    all u: University | some u.associatedToUni
}


// an evaluation for an internship can either be positive or negative
fact InternshipStatusResultValidity {
    all eval: InternshipStatus | eval.result in EvalResult
}


// the companyTutor that evaluates the internship must be the one who offered the same internship
fact InternshipStatusTutorMustBeInternshipOwner {
    all e: InternshipStatus | e.companyTutor = e.internship.offeredBy
}


// bidirectional between companyTutor and the evaluations
fact CompanyTutorInternshipStatussBidirectional {
    all ct: CompanyTutor | ct.evaluations = { e: InternshipStatus | e.companyTutor = ct }
}


// every internship application of a student must have a corresponding evaluation (1-to-1)
fact EveryApplicationHasInternshipStatus {
    all s: Student, i: Internship | 
        i in s.applies implies some e: InternshipStatus | e.student = s and e.internship = i
}


// ensures a companyTutor can only read StudentInformation_CVs of students they have evaluated
fact ReadOnlyEvaluatedStudentInformation_CVs {
    all ct: CompanyTutor | ct.read = ct.evaluations.student.haveStudentInformation
}


// evaluation result is Positive => a professor (from the student's university) is assigned as univeristyTutor
// evaluation result is Negative => no universityTutor is assigned.
fact UniversityTutorAssignment {
    all eval: InternshipStatus |
        ((eval.result = Positive) => 
            (some eval.universityTutor and eval.universityTutor in eval.student.belongsTo.associatedToUni))
        and
        ((eval.result = Negative) => no eval.universityTutor)
}


// define when a University monitors a Student
fact UniversityMonitorsStudent {
    all u: University, s: Student | 
        s in u.monitor iff (  // a university monitor a student
            s.belongsTo = u and // if the student belongs to the same university AND
            some i: Internship | i in s.applies and   // if the student applies for an internship AND
            some eval: InternshipStatus | // if there is an evaluation status
                eval.internship = i and // of that internship
                eval.student = s and // for that student
                eval.result = Positive // with positive evaluation
        )
}


// internship mentioned in the feedback is actually offered by the company in "feedbackFor"
fact FeedbackMatchesCompanyOffer { // a feedback (from the algorithm) about an internship should to connected also to the company that offers that internship
    all f: FeedbackToInternship | f.feedbackInternshipOn in f.feedbackInternshipFor.offerInternships
}


// feedbackAbout internship information matches the internship's information
fact FeedbackMatchesInternshipInformation {
    all f: FeedbackToInternship | f.feedbackInternshipAbout = f.feedbackInternshipOn.haveInternshipInformation
}


// at most one feedback per internship
fact AtMostOneFeedbackPerInternship {
    all disj f1, f2: FeedbackToInternship | f1.feedbackInternshipOn != f2.feedbackInternshipOn
}


// a feedback to student must reference the cv of the student + each student has exactly one feedback per student
fact FeedbackToStudentCorrespondence {
    all fs: FeedbackToStudent | fs.feedbackStudentAbout = fs.feedbackStudentFor.haveStudentInformation  
    all s: Student | one fs: FeedbackToStudent | fs.feedbackStudentFor = s     // a student has exactly one FeedbackToStudent
}


// for each internship at most one positive evaluation
fact OnlyOnePositiveInternshipStatusPerInternship {  // a company can not accept two students for the same position (note: in some cases this fact might be relaxed, but is not discussed here)
    all i: Internship | lone e: InternshipStatus | e.internship = i and e.result = Positive
}


// only students with a positive evaluation for that internship can report a problem
fact OnlyStudentsWithPositiveInternshipStatusCanReportProblem {
    all p: ProblemOfStudent | 
        some eval: InternshipStatus | 
            eval.student = p.reportedBy and  // a problem can be reported by a student about an internship only if the student is accepted for that internship
            eval.internship = p.aboutInternship and
            eval.result = Positive
}


// communicate only if the evaluation is positive
fact PositiveInternshipStatusCommunications {
    all eval: InternshipStatus | 
        eval.result = Positive implies (
            let s = eval.student,
                t = eval.companyTutor,
                p = eval.universityTutor |
                // communication between student and companytutor
                s in t.communicate and
                t in s.communicate and
                // communication between student and universitytutor
                s in p.communicate and
                p in s.communicate and
                // communication between company tutor and universitytutor
                t in p.communicate and
                p in t.communicate
        )
}


// all feedbacks (students and internships ones) are connected to the single algorithm
fact AllFeedbacksConnectedToAlgorithm {
    Algorithm.suggestoToStudent = FeedbackToStudent
    Algorithm.suggestoToInternship = FeedbackToInternship
}


// ensure that every CompanyInformation is linked to exactly one Company
fact AllCompanyInformationsLinked {
    all ci: CompanyInformation | one c: Company | c.haveCompanyInformation = ci
}


// ensure that no company shares the same CompanyInformation
fact UniqueCompanyInformationPerCompany {
    all disj c1, c2: Company | c1.haveCompanyInformation != c2.haveCompanyInformation
}


// an internship can have at most one problem (0 or 1) of student
fact AtMostOneProblemOfStudentPerInternship {
    all i: Internship | lone p: ProblemOfStudent | p.aboutInternship = i
}


// restrict communications
fact RestrictCommunications {
    all u, v: User | 
        u in v.communicate implies (
            some eval: InternshipStatus | 
                eval.result = Positive and 
                (
                    (eval.student = u and eval.companyTutor = v) or
                    (eval.companyTutor = u and eval.student = v) or
                    (eval.student = u and eval.universityTutor = v) or
                    (eval.universityTutor = u and eval.student = v) or
                    (eval.companyTutor = u and eval.universityTutor = v) or
                    (eval.universityTutor = u and eval.companyTutor = v)
                )
        )
}


// professor can see reported problems of students they tutor
fact ProfessorCanSeeReportedProblems {
    all p: ProblemOfStudent | {
        some eval: InternshipStatus | (
            eval.internship = p.aboutInternship and
            eval.student = p.reportedBy and
            eval.result = Positive and
            p in eval.universityTutor.see
        )
    }
}


// a companyTutor can see only the problems reported by the students about an internship they manage
fact CompanyTutorSeesOnlyManagedProblems {
    all p: ProblemOfStudent | {
        let ct = p.aboutInternship.offeredBy {
            p in ct.see
            all otherCT: CompanyTutor - ct | p not in otherCT.see
        }
    }
}


// companyTutor sees problems of managed internships
fact CompanyTutorSeesProblemsOfManagedInternships {
    all p: ProblemOfStudent | 
        p in p.aboutInternship.offeredBy.see
}


// if a professor sees a problem, then the professor manages that problem
fact ProfessorSeesImplyManagesProblem {
    all p: Professor, prob: ProblemOfStudent |
        prob in p.see implies prob in p.manageProblemOfStudent
}


// there can be at most one ProblemOfCompany per internship
fact AtMostOneProblemOfCompanyPerInternship {
    all i: Internship | lone p: ProblemOfCompany | p.aboutInternship = i
}


// only company tutors with a positive evaluation for an internship can report a ProblemOfCompany on that internship
fact OnlyCompanyTutorsWithPositiveInternshipStatusCanReportProblemOfCompany {
    all p: ProblemOfCompany |
        some eval: InternshipStatus | 
            eval.companyTutor = p.reportedBy and
            eval.internship = p.aboutInternship and
            eval.result = Positive
}


// professors, companyTutors and students associated with a positive evaluation see the ProblemOfCompany
fact VisibilityOfProblemOfCompany {
    all p: ProblemOfCompany | {
        some eval: InternshipStatus | (
            eval.internship = p.aboutInternship and
            eval.companyTutor = p.reportedBy and
            eval.result = Positive and
            p in eval.companyTutor.seeCompanyProblem and
            p in eval.universityTutor.seeCompanyProblem and
            p in eval.student.seeCompanyProblem
        )
    }
}


// if a CompanyTutor sees a company problem, they must also manage it
fact CompanyTutorSeesImplyManagesProblemOfCompany {
    all ct: CompanyTutor, prob: ProblemOfCompany |
        prob in ct.seeCompanyProblem implies prob in ct.manageProblemOfCompany
}


// if there is a problem and that problem requires the end of the internship
// then the internship will end
fact ProblemForcesTermination {
  all ps: ProblemOfStudent |
    (ps.terminateInternship = Positive) => (ps.aboutInternship.terminated = Positive)
  all pc: ProblemOfCompany |
    (pc.terminateInternship = Positive) => (pc.aboutInternship.terminated = Positive)
}


// eventually all internship must come to an end
fact EventuallyAllInternshipsTerminate {
  all i: Internship | eventually (i.terminated = Positive)
}






// ----------------------------------  TESTING FACTS  ----------------------------------


// there should be at least one visualization of an internship made by a student
fact AtLeastOneVisualization {
    some s: Student | some i: Internship | i in s.visualize
}


// there exists at least a student that applies for at least one internships
fact AtLeastOneApplication {
    some s: Student | some i: Internship | i in s.applies
}


// minimum cardinalities for some signatures
fact {
    #Student > 1
    #Company > 1
    #CompanyTutor > 1
    #University > 1
    #Professor > 1
    #InternshipStatus >1
    #ProblemOfStudent >1
    #FeedbackToStudent > 1
    #FeedbackToInternship > 1
    #CompanyInformation > 1
    #ProblemOfCompany > 1
}


// at least one positive evaluation
fact AtLeastOnePositiveInternshipStatus {
    some e: InternshipStatus | e.result = Positive
}


//fact AtMostTwoPositiveEvaluations {
//    # { i: InternshipStatus | i.result = Positive } <= 2
//}


// Each student can have at most one InternshipStatus with a Positive result
// this fact could be relaxed
fact OnePositiveInternshipStatusPerStudent {
    all s: Student | lone e: InternshipStatus | e.student = s and e.result = Positive
}




// ---------------------------------- RUN COMMAND ----------------------------------
run {} for 10 // but 2 Company, 4 CompanyTutor, 5 Internship, 5 StudentInformation_CV, 2 University, 10 Email, 10 InternshipInformation, 4 InternshipStatus, 2 EvalResult